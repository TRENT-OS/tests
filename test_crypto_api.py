
import pytest, sys
sys.path.append('../common')
import test_parser as parser

TEST_NAME = 'test_crypto_api'

# AUTOGENERATED TEST FUNCTIONS BELOW -------------------------------------------

def test_SeosCryptoApi_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_init(), covering the invalid ways of using this
    function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 6, 'test_SeosCryptoApi_init_neg')

def test_SeosCryptoApi_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_free(), covering the invalid ways of using this
    function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_free_neg')

def test_SeosCryptoApi_Agreement_init_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_agree_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_agree(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_agree_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Agreement_agree(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_0(boot):
    """
    Compute shared key for randomly generated public/private keys with DH.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_0(boot):
    """
    Compute shared key for randomly generated public/private keys with ECDH.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Agreement_do_ECDH', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_rnd_0(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the DH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_rnd_0(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the ECDH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 23, 'test_SeosCryptoApi_Agreement_do_ECDH_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_init_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_start_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_start(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_process_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_finalize_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_init_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_init(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_start_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_process_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_finalize_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_enc_0(boot):
    """
    Encrypt a set of plaintext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_enc', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_dec_0(boot):
    """
    Decrypt a set of ciphertext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_dec', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_enc_0(boot):
    """
    Encrypt a set of plaintext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_enc', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_dec_0(boot):
    """
    Decrypt a set of ciphertext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_dec', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_enc_0(boot):
    """
    Encrypt a set of plaintext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_enc', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos_0(boot):
    """
    Decrypt a set of ciphertext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg_0(boot):
    """
    Encrypt a ciphertext with AES-GCM but modify the tag so it is invalid.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_rnd_0(boot):
    """
    Generate random keys and inputs for AES-ECB, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_rnd_0(boot):
    """
    Generate random keys and inputs for AES-CBC, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_rnd_0(boot):
    """
    Generate random keys and inputs for AES-GCM, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Digest_init_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Digest_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_pos', 'mode=1')

def test_SeosCryptoApi_Digest_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Digest_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_neg', 'mode=1')

def test_SeosCryptoApi_Digest_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Digest_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_pos', 'mode=1')

def test_SeosCryptoApi_Digest_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Digest_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_neg', 'mode=1')

def test_SeosCryptoApi_Digest_clone_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Digest_clone(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_pos', 'mode=1')

def test_SeosCryptoApi_Digest_clone_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Digest_clone(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_neg', 'mode=1')

def test_SeosCryptoApi_Digest_process_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Digest_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_neg', 'mode=1')

def test_SeosCryptoApi_Digest_finalize_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Digest_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_neg', 'mode=1')

def test_SeosCryptoApi_Digest_process_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_buffer', 'mode=1')

def test_SeosCryptoApi_Digest_finalize_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_buffer', 'mode=1')

def test_SeosCryptoApi_Digest_do_SHA256_0(boot):
    """
    Hash some testvectors with SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_SHA256', 'mode=1')

def test_SeosCryptoApi_Digest_do_MD5_0(boot):
    """
    Hash some testvectors with MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_MD5', 'mode=1')

def test_SeosCryptoApi_Key_import_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_import(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_import_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_import(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_export_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_export(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_export_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_export(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_generate_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_generate(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_generate_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_generate(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_makePublic_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_makePublic(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Key_makePublic_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_makePublic_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_makePublic(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_makePublic_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_getParams_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_getParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_getParams_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_getParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_loadParams_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_loadParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_loadParams_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_loadParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_getAttribs_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_getAttribs(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_getAttribs_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_getAttribs(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Key_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Key_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_getParams_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_getParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Key_loadParams_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_loadParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Mac_init_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Mac_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_pos', 'mode=1')

def test_SeosCryptoApi_Mac_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Mac_init(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_neg', 'mode=1')

def test_SeosCryptoApi_Mac_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Mac_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_pos', 'mode=1')

def test_SeosCryptoApi_Mac_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Mac_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_neg', 'mode=1')

def test_SeosCryptoApi_Mac_start_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Mac_start(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_neg', 'mode=1')

def test_SeosCryptoApi_Mac_process_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Mac_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_neg', 'mode=1')

def test_SeosCryptoApi_Mac_finalize_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Mac_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_neg', 'mode=1')

def test_SeosCryptoApi_Mac_start_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_buffer', 'mode=1')

def test_SeosCryptoApi_Mac_process_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_process(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_buffer', 'mode=1')

def test_SeosCryptoApi_Mac_finalize_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_finalize(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_buffer', 'mode=1')

def test_SeosCryptoApi_Mac_do_HMAC_MD5_0(boot):
    """
    Compute MAC on testvectors with HMAC-MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_MD5', 'mode=1')

def test_SeosCryptoApi_Mac_do_HMAC_SHA256_0(boot):
    """
    Compute MAC on testvectors with HMAC-SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_SHA256', 'mode=1')

def test_SeosCryptoApi_Rng_getBytes_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Rng_getBytes(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_pos', 'mode=1')

def test_SeosCryptoApi_Rng_getBytes_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Rng_getBytes(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_neg', 'mode=1')

def test_SeosCryptoApi_Rng_reSeed_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Rng_reSeed(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_pos', 'mode=1')

def test_SeosCryptoApi_Rng_reSeed_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Rng_reSeed(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_neg', 'mode=1')

def test_SeosCryptoApi_Rng_reSeed_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_reSeed(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_buffer', 'mode=1')

def test_SeosCryptoApi_Rng_getBytes_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_getBytes(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_buffer', 'mode=1')

def test_SeosCryptoApi_Signature_init_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Signature_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_init_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Signature_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_free_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_Signature_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_pos', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_free_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Signature_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_sign_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Signature_sign(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_verify_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Signature_verify(), covering the invalid ways
    of using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_neg', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_sign_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_sign(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_verify_buffer_0(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_verify(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_buffer', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign_0(boot):
    """
    Sign some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify_0(boot):
    """
    Verify some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify_0(boot):
    """
    Verify some testvectors with RSA PCKS#1 V2.1.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd_0(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 1.5.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 11, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd_0(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 2.1.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 10, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd', 'mode=1,expo=1')

def test_SeosCryptoApi_Agreement_init_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_init_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_agree_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_agree(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_agree_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Agreement_agree(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_1(boot):
    """
    Compute shared key for randomly generated public/private keys with DH.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_1(boot):
    """
    Compute shared key for randomly generated public/private keys with ECDH.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Agreement_do_ECDH', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_rnd_1(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the DH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_rnd_1(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the ECDH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 25, 'test_SeosCryptoApi_Agreement_do_ECDH_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_init_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_init_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_start_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_start(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_process_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_finalize_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_init_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_init(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_start_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_process_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_finalize_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_enc_1(boot):
    """
    Encrypt a set of plaintext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_enc', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_dec_1(boot):
    """
    Decrypt a set of ciphertext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_dec', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_enc_1(boot):
    """
    Encrypt a set of plaintext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_enc', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_dec_1(boot):
    """
    Decrypt a set of ciphertext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_dec', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_enc_1(boot):
    """
    Encrypt a set of plaintext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_enc', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos_1(boot):
    """
    Decrypt a set of ciphertext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg_1(boot):
    """
    Encrypt a ciphertext with AES-GCM but modify the tag so it is invalid.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_rnd_1(boot):
    """
    Generate random keys and inputs for AES-ECB, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_rnd_1(boot):
    """
    Generate random keys and inputs for AES-CBC, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_rnd_1(boot):
    """
    Generate random keys and inputs for AES-GCM, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Digest_init_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Digest_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_pos', 'mode=2')

def test_SeosCryptoApi_Digest_init_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Digest_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_neg', 'mode=2')

def test_SeosCryptoApi_Digest_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Digest_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_pos', 'mode=2')

def test_SeosCryptoApi_Digest_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Digest_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_neg', 'mode=2')

def test_SeosCryptoApi_Digest_clone_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Digest_clone(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_pos', 'mode=2')

def test_SeosCryptoApi_Digest_clone_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Digest_clone(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_neg', 'mode=2')

def test_SeosCryptoApi_Digest_process_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Digest_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_neg', 'mode=2')

def test_SeosCryptoApi_Digest_finalize_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Digest_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_neg', 'mode=2')

def test_SeosCryptoApi_Digest_process_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_buffer', 'mode=2')

def test_SeosCryptoApi_Digest_finalize_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_buffer', 'mode=2')

def test_SeosCryptoApi_Digest_do_SHA256_1(boot):
    """
    Hash some testvectors with SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_SHA256', 'mode=2')

def test_SeosCryptoApi_Digest_do_MD5_1(boot):
    """
    Hash some testvectors with MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_MD5', 'mode=2')

def test_SeosCryptoApi_Key_import_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_import(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_import_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_import(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_export_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_export(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_export_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_export(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_generate_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_generate(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_generate_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_generate(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_makePublic_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_makePublic(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Key_makePublic_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_makePublic_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_makePublic(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_makePublic_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_getParams_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_getParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_getParams_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_getParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_loadParams_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_loadParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_loadParams_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_loadParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_getAttribs_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_getAttribs(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_getAttribs_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_getAttribs(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Key_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Key_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_getParams_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_getParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_loadParams_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_loadParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_migrate_pos_0(boot):
    """
    Positive tests for SeosCryptoApi_migrateObject(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_migrate_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Key_migrate_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_migrateObject(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_migrate_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Mac_init_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Mac_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_pos', 'mode=2')

def test_SeosCryptoApi_Mac_init_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Mac_init(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_neg', 'mode=2')

def test_SeosCryptoApi_Mac_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Mac_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_pos', 'mode=2')

def test_SeosCryptoApi_Mac_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Mac_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_neg', 'mode=2')

def test_SeosCryptoApi_Mac_start_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Mac_start(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_neg', 'mode=2')

def test_SeosCryptoApi_Mac_process_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Mac_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_neg', 'mode=2')

def test_SeosCryptoApi_Mac_finalize_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Mac_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_neg', 'mode=2')

def test_SeosCryptoApi_Mac_start_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_buffer', 'mode=2')

def test_SeosCryptoApi_Mac_process_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_process(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_buffer', 'mode=2')

def test_SeosCryptoApi_Mac_finalize_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_finalize(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_buffer', 'mode=2')

def test_SeosCryptoApi_Mac_do_HMAC_MD5_1(boot):
    """
    Compute MAC on testvectors with HMAC-MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_MD5', 'mode=2')

def test_SeosCryptoApi_Mac_do_HMAC_SHA256_1(boot):
    """
    Compute MAC on testvectors with HMAC-SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_SHA256', 'mode=2')

def test_SeosCryptoApi_Rng_getBytes_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Rng_getBytes(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_pos', 'mode=2')

def test_SeosCryptoApi_Rng_getBytes_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Rng_getBytes(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_neg', 'mode=2')

def test_SeosCryptoApi_Rng_reSeed_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Rng_reSeed(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_pos', 'mode=2')

def test_SeosCryptoApi_Rng_reSeed_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Rng_reSeed(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_neg', 'mode=2')

def test_SeosCryptoApi_Rng_reSeed_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_reSeed(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_buffer', 'mode=2')

def test_SeosCryptoApi_Rng_getBytes_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_getBytes(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_buffer', 'mode=2')

def test_SeosCryptoApi_Signature_init_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Signature_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_init_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Signature_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_free_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_Signature_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_pos', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_free_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Signature_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_sign_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Signature_sign(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_verify_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_Signature_verify(), covering the invalid ways
    of using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_neg', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_sign_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_sign(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_verify_buffer_1(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_verify(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_buffer', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign_1(boot):
    """
    Sign some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify_1(boot):
    """
    Verify some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify_1(boot):
    """
    Verify some testvectors with RSA PCKS#1 V2.1.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd_1(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 1.5.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 12, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd_1(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 2.1.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 9, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd', 'mode=2,expo=1')

def test_SeosCryptoApi_Agreement_init_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_init_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_init_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_agree_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_agree(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Agreement_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_free_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_agree_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Agreement_agree(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_agree_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_2(boot):
    """
    Execute key agreement based on testvector using DH algorithm.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_2(boot):
    """
    Execute key agreement based on testvector using ECDH algorithm.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Agreement_do_ECDH', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_rnd_2(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the DH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_do_ECDH_rnd_2(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the ECDH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 24, 'test_SeosCryptoApi_Agreement_do_ECDH_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Agreement_do_DH_3(boot):
    """
    Execute key agreement based on testvector using DH algorithm.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_do_DH', 'mode=4,expo=0')

def test_SeosCryptoApi_Agreement_do_DH_rnd_3(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the DH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Agreement_do_DH_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Agreement_do_ECDH_3(boot):
    """
    Execute key agreement based on testvector using ECDH algorithm.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Agreement_do_ECDH', 'mode=4,expo=0')

def test_SeosCryptoApi_Agreement_do_ECDH_rnd_3(boot):
    """
    Generate two random keypairs and and perform key agreements for each private/public
    pair with the ECDH algorithm. Check that the results match. Iterate for a few times (~5).
    """
    parser.check_test(boot(TEST_NAME), 27, 'test_SeosCryptoApi_Agreement_do_ECDH_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Agreement_key_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Agreement_key(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Agreement_key_neg', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_init_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_init_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Cipher_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_free_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_start_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_start(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_process_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_finalize_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Cipher_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_init_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_init(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_init_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_start_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_start_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_process_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_process_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_finalize_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Cipher_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_finalize_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_enc_2(boot):
    """
    Encrypt a set of plaintext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_enc', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_dec_2(boot):
    """
    Decrypt a set of ciphertext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_dec', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_enc_2(boot):
    """
    Encrypt a set of plaintext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_enc', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_dec_2(boot):
    """
    Decrypt a set of ciphertext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_dec', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_enc_2(boot):
    """
    Encrypt a set of plaintext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_enc', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos_2(boot):
    """
    Encrypt a set of ciphertext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg_2(boot):
    """
    Encrypt a ciphertext with AES-GCM but modify the tag so it is invalid.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_rnd_2(boot):
    """
    Generate random keys and inputs for AES-ECB, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_CBC_rnd_2(boot):
    """
    Generate random keys and inputs for AES-CBC, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_GCM_rnd_2(boot):
    """
    Generate random keys and inputs for AES-GCM, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Cipher_do_AES_ECB_enc_3(boot):
    """
    Encrypt a set of plaintext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_enc', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_ECB_dec_3(boot):
    """
    Decrypt a set of ciphertext vectors with AES-ECB.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_dec', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_CBC_enc_3(boot):
    """
    Encrypt a set of plaintext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_enc', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_CBC_dec_3(boot):
    """
    Decrypt a set of ciphertext vectors with AES-CBC.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_dec', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_GCM_enc_3(boot):
    """
    Encrypt a set of plaintext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_enc', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos_3(boot):
    """
    Decrypt a set of ciphertext vectors with AES-GCM.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_dec_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_ECB_rnd_3(boot):
    """
    Generate random keys and inputs for AES-ECB, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_ECB_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_CBC_rnd_3(boot):
    """
    Generate random keys and inputs for AES-CBC, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_CBC_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Cipher_do_AES_GCM_rnd_3(boot):
    """
    Generate random keys and inputs for AES-GCM, encrypt and then decrypt again.
    Check that inputs and outputs match. Repeat for a few (~1000) iterations.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Cipher_do_AES_GCM_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Digest_init_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Digest_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_pos', 'mode=4')

def test_SeosCryptoApi_Digest_init_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Digest_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_init_neg', 'mode=4')

def test_SeosCryptoApi_Digest_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Digest_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_pos', 'mode=4')

def test_SeosCryptoApi_Digest_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Digest_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_free_neg', 'mode=4')

def test_SeosCryptoApi_Digest_clone_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Digest_clone(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_pos', 'mode=4')

def test_SeosCryptoApi_Digest_clone_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Digest_clone(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_clone_neg', 'mode=4')

def test_SeosCryptoApi_Digest_process_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Digest_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_neg', 'mode=4')

def test_SeosCryptoApi_Digest_finalize_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Digest_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_neg', 'mode=4')

def test_SeosCryptoApi_Digest_process_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_process(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_process_buffer', 'mode=4')

def test_SeosCryptoApi_Digest_finalize_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Digest_finalize(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_finalize_buffer', 'mode=4')

def test_SeosCryptoApi_Digest_do_SHA256_2(boot):
    """
    Hash some testvectors with SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_SHA256', 'mode=4')

def test_SeosCryptoApi_Digest_do_MD5_2(boot):
    """
    Hash some testvectors with MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Digest_do_MD5', 'mode=4')

def test_SeosCryptoApi_Key_import_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_import(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_import_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_import(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_export_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_export(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_export_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_export(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_export_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_generate_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_generate(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_generate_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_generate(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_makePublic_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_makePublic(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Key_makePublic_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_makePublic_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_makePublic(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_makePublic_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_getParams_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_getParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_getParams_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_getParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_loadParams_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_loadParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_loadParams_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_loadParams(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_getAttribs_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_getAttribs(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_getAttribs_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_getAttribs(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getAttribs_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Key_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Key_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_free_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_getParams_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_getParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_loadParams_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Key_loadParams(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Key_import_pos_3(boot):
    """
    Positive tests for SeosCryptoApi_Key_import(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_import_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_generate_pos_3(boot):
    """
    Positive tests for SeosCryptoApi_Key_generate(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_generate_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_makePublic_pos_3(boot):
    """
    Positive tests for SeosCryptoApi_Key_makePublic(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Key_makePublic_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_getParams_pos_3(boot):
    """
    Positive tests for SeosCryptoApi_Key_getParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_getParams_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_loadParams_pos_3(boot):
    """
    Positive tests for SeosCryptoApi_Key_loadParams(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_loadParams_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_migrate_pos_1(boot):
    """
    Positive tests for SeosCryptoApi_migrateObject(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_migrate_pos', 'mode=4,expo=0')

def test_SeosCryptoApi_Key_migrate_neg_1(boot):
    """
    Negative tests for SeosCryptoApi_migrateObject(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Key_migrate_neg', 'mode=4,expo=0')

def test_SeosCryptoApi_Mac_init_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Mac_init(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_pos', 'mode=4')

def test_SeosCryptoApi_Mac_init_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Mac_init(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_init_neg', 'mode=4')

def test_SeosCryptoApi_Mac_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Mac_free(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_pos', 'mode=4')

def test_SeosCryptoApi_Mac_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Mac_free(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_free_neg', 'mode=4')

def test_SeosCryptoApi_Mac_start_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Mac_start(), covering the invalid ways of using
    this function thus verifying that it returns error codes instead of crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_neg', 'mode=4')

def test_SeosCryptoApi_Mac_process_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Mac_process(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_neg', 'mode=4')

def test_SeosCryptoApi_Mac_finalize_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Mac_finalize(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_neg', 'mode=4')

def test_SeosCryptoApi_Mac_start_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_start(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_start_buffer', 'mode=4')

def test_SeosCryptoApi_Mac_process_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_process(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_process_buffer', 'mode=4')

def test_SeosCryptoApi_Mac_finalize_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Mac_finalize(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_finalize_buffer', 'mode=4')

def test_SeosCryptoApi_Mac_do_HMAC_MD5_2(boot):
    """
    Compute MAC on testvectors with HMAC-MD5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_MD5', 'mode=4')

def test_SeosCryptoApi_Mac_do_HMAC_SHA256_2(boot):
    """
    Compute MAC on testvectors with HMAC-SHA256.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Mac_do_HMAC_SHA256', 'mode=4')

def test_SeosCryptoApi_Rng_getBytes_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Rng_getBytes(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_pos', 'mode=4')

def test_SeosCryptoApi_Rng_getBytes_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Rng_getBytes(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_neg', 'mode=4')

def test_SeosCryptoApi_Rng_reSeed_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Rng_reSeed(), covering the valid ways of using
    this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_pos', 'mode=4')

def test_SeosCryptoApi_Rng_reSeed_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Rng_reSeed(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_neg', 'mode=4')

def test_SeosCryptoApi_Rng_reSeed_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_reSeed(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_reSeed_buffer', 'mode=4')

def test_SeosCryptoApi_Rng_getBytes_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Rng_getBytes(), behave the same
    regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Rng_getBytes_buffer', 'mode=4')

def test_SeosCryptoApi_Signature_init_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Signature_init(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_init_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Signature_init(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_init_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_free_pos_2(boot):
    """
    Positive tests for SeosCryptoApi_Signature_free(), covering the valid ways of
    using this function.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_pos', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_free_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Signature_free(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_free_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_sign_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Signature_sign(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_verify_neg_2(boot):
    """
    Negative tests for SeosCryptoApi_Signature_verify(), covering the invalid ways
    of using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_neg', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_sign_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_sign(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_sign_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_verify_buffer_2(boot):
    """
    Test that buffers/buffer sizes for SeosCryptoApi_Signature_verify(), behave the
    same regardless of the mode the API is in.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_verify_buffer', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign_2(boot):
    """
    Sign some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify_2(boot):
    """
    Verify some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify_2(boot):
    """
    Verify some testvectors with RSA PCKS#1 V2.1.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd_2(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 1.5.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 8, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd_2(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 2.1
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 9, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd', 'mode=4,expo=1')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign_3(boot):
    """
    Sign some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 2, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_sign', 'mode=4,expo=0')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify_3(boot):
    """
    Verify some testvectors with RSA PCKS#1 V1.5.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_verify', 'mode=4,expo=0')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify_3(boot):
    """
    Verify some testvectors with RSA PCKS#1 V2.1.
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_verify', 'mode=4,expo=0')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd_3(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 1.5.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 11, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V15_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd_3(boot):
    """
    Generate a random keypair and hash, sign it and very the result with RSA PKCS#1 2.1.
    Repeat for a few iterations (~10).
    """
    parser.check_test(boot(TEST_NAME), 9, 'test_SeosCryptoApi_Signature_do_RSA_PKCS1_V21_rnd', 'mode=4,expo=0')

def test_SeosCryptoApi_Signature_key_neg_0(boot):
    """
    Negative tests for SeosCryptoApi_Signature_key(), covering the invalid ways of
    using this function thus verifying that it returns error codes instead of
    crashing
    """
    parser.check_test(boot(TEST_NAME), 1, 'test_SeosCryptoApi_Signature_key_neg', 'mode=4,expo=0')


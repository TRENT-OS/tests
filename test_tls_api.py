import pytest, sys, re, os
sys.path.append('../common')
import logs

TEST_SYSTEM_NAME = 'test_tls_api'
TEST_TIMEOUT = 4*60

def check_test_result(test_run, test_name, test_args=None):
    # We dont want traceback to this function
    __tracebackhide__ = True
    test_file = test_run[1]
    # Test outputs need to match this pattern
    if (test_args == None):
        test_result = r'!!! %s: OK' % re.escape(test_name)
    else:
        test_result = r'!!! %s\(%s\): OK' % (re.escape(test_name), re.escape(test_args))
    (text, match) = logs.get_match_in_line(test_file, re.compile(test_result), TEST_TIMEOUT)
    if (match == None):
        # Rewind the file and look for the assertion that failed
        test_file.seek(0, 0)
        # If test failed, look for the assert that was hit during that test
        assert_result = r'Assertion failed:(.*)%s(.*)' % re.escape(test_name)
        (text, match) = logs.get_match_in_line(test_file, re.compile(assert_result), 1)
        if (match == None):
            match = "<No matching assertion failure found>"
        # Make it fail
        pytest.fail(match)

# AUTOGENERATED TEST FUNCTIONS BELOW -------------------------------------------

def test_SeosTlsApi_init_pos(boot_with_proxy, tls_server):
    """
    Positive tests of SeosTlsApi_init() with possible configurations
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_init_pos')

def test_SeosTlsApi_init_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_init() with invalid configurations
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_init_neg')

def test_SeosTlsApi_free_pos(boot_with_proxy, tls_server):
    """
    Positive tests of SeosTlsApi_free() with possible configurations
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_free_pos')

def test_SeosTlsApi_free_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_free() with invalid configurations
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_free_neg')

def test_SeosTlsApi_handshake_pos(boot_with_proxy, tls_server):
    """
    Positive test of SeosTlsApi_handshake() with valid params and correct state of TLS session (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_handshake_pos', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_handshake_pos', 'api->mode=2')

def test_SeosTlsApi_handshake_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_handshake() with invalid params (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_handshake_neg', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_handshake_neg', 'api->mode=2')

def test_SeosTlsApi_write_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_write() with invalid params (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_write_neg', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_write_neg', 'api->mode=2')

def test_SeosTlsApi_write_pos(boot_with_proxy, tls_server):
    """
    Positive test of SeosTlsApi_write() with valid params and correct state of TLS session (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_write_pos', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_write_pos', 'api->mode=2')

def test_SeosTlsApi_read_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_read() with invalid params (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_read_neg', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_read_neg', 'api->mode=2')

def test_SeosTlsApi_read_pos(boot_with_proxy, tls_server):
    """
    Positive test of SeosTlsApi_read() with valid params and correct state of TLS session (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_read_pos', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_read_pos', 'api->mode=2')

def test_SeosTlsApi_reset_neg(boot_with_proxy, tls_server):
    """
    Negative tests of SeosTlsApi_reset() with invalid params (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_reset_neg', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_reset_neg', 'api->mode=2')

def test_SeosTlsApi_reset_pos(boot_with_proxy, tls_server):
    """
    Positive test of SeosTlsApi_handshake() with valid params (as lib and RPC client)
    """
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_reset_pos', 'api->mode=0')
    check_test_result(boot_with_proxy(TEST_SYSTEM_NAME), 'test_SeosTlsApi_reset_pos', 'api->mode=2')
